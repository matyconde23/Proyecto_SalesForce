public with sharing class ObtenerlinkCortoBitly {

    /**
     * M√©todo asincr√≥nico que genera y asigna un link corto de Bitly a un tanque industrial.
     * 
     * Este m√©todo debe ejecutarse con anotaci√≥n @future(callout=true) ya que realiza una llamada HTTP externa.
     * 
     * Id del tanque al que se le asignar√° el link corto.
     */
    @future(callout=true)
    public static void procesarLinkCortoAsync(String tanqueId) {
        System.debug('üîÅ [INICIO] procesarLinkCortoAsync');
        System.debug('üÜî ID recibido: ' + tanqueId);

        try {
            // Obtener el tanque desde la base de datos
            Tanque_Industrial__c tanque = [
                SELECT Id, URL__c 
                FROM Tanque_Industrial__c 
                WHERE Id = :tanqueId 
                LIMIT 1
            ];
            System.debug('‚úÖ Tanque encontrado: ' + tanque.Id);

            // Construir URL larga del registro en Lightning
            String baseUrl = URL.getOrgDomainUrl().toExternalForm();
            System.debug('üåê Dominio Salesforce: ' + baseUrl);

            String linkLargo = baseUrl + '/lightning/r/Tanque_Industrial__c/' + tanque.Id + '/view';
            System.debug('üîó URL larga generada: ' + linkLargo);

            // Obtener la versi√≥n acortada usando la API de Bitly
            String shortUrl = obtenerShortLinkBitly(linkLargo);
            System.debug('üîÅ Resultado de obtenerShortLinkBitly: ' + shortUrl);

            // Si se obtuvo correctamente el link corto, se actualiza el tanque
            if (shortUrl != null) {
                tanque.URL__c = shortUrl;
                update tanque;
                System.debug('‚úÖ Link corto guardado en tanque: ' + shortUrl);
            } else {
                System.debug('‚ö†Ô∏è No se gener√≥ el link corto (shortUrl es null)');
            }

        } catch (Exception e) {
            System.debug('‚ùå Excepci√≥n en procesarLinkCortoAsync: ' + e.getMessage());
        }

        System.debug('üîÅ [FIN] procesarLinkCortoAsync');
    }

    /**
     * Realiza la llamada HTTP a la API de Bitly para acortar una URL larga.
     * 
     * @param linkLargo URL completa del registro en Salesforce que se quiere acortar.
     * @return Link corto generado por Bitly o null si hubo error.
     */
    private static String obtenerShortLinkBitly(String linkLargo) {
    System.debug('‚û°Ô∏è Entrando a obtenerShortLinkBitly con URL: ' + linkLargo);

    // Crear la solicitud HTTP
    HttpRequest req = new HttpRequest();
    req.setEndpoint('https://api-ssl.bitly.com/v4/shorten');
    req.setMethod('POST');
    req.setHeader('Authorization', 'Bearer 4a729ff114cb47bdd7fee13d18fc074193baafc4'); // üîê Token Bitly (¬°debe ocultarse en producci√≥n!)
    req.setHeader('Content-Type', 'application/json');

    // Armar payload JSON
    req.setBody('{"long_url": "' + linkLargo + '"}');
    System.debug('üì§ Payload enviado a Bitly: ' + req.getBody());

    Http http = new Http();
    try {
        // Enviar la solicitud a Bitly
        HttpResponse res = http.send(req);
        System.debug('üì• C√≥digo de respuesta Bitly: ' + res.getStatusCode());
        System.debug('üìÑ Cuerpo respuesta Bitly: ' + res.getBody());

        // Si la respuesta fue exitosa (200 o 201), extraer el link
        if (res.getStatusCode() == 200 || res.getStatusCode() == 201) {
            Map<String, Object> json = (Map<String, Object>) JSON.deserializeUntyped(res.getBody());
            String linkCorto = (String) json.get('link');
            System.debug('‚úÖ Link corto recibido: ' + linkCorto);
            return linkCorto;
        } else {
            System.debug('‚ö†Ô∏è Bitly respondi√≥ con c√≥digo inesperado: ' + res.getStatusCode() + '. Usando link largo.');
            return linkLargo; // ‚ö†Ô∏è Retornar el link largo si Bitly no respondi√≥ correctamente
        }

    } catch (Exception e) {
        System.debug('‚ùå Excepci√≥n al llamar a Bitly: ' + e.getMessage());
        return linkLargo;
    } 
}

}
